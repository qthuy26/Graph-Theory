void strong_connect(Graph *G, int 1){
    num[1] = min_num[x] = 1; k++ = 2
    push(&S, 1);
    on_stack[1] = 1;

    List list = neighbors(G, 1) = {2, 6}
    int j;
    for(j = 1; j <= list.size; j++){
        j = 1:
            int y = element_at(&list, j) = 2
            if(num[2] < 0){ // dung
                strong_connect(G, 2)

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                void strong_connect(Graph *G, int 2){
                    num[2] = min_num[2] = 2; k++ = 3
                    push(&S, 2);
                    on_stack[2] = 1;

                    List list = neighbors(G, 2) = {3}
                    int j;
                    for(j = 1; j <= list.size; j++){
                        j = 1:
                            int y = element_at(&list, j) = 3
                            if(num[3] < 0){ // dung
                                strong_connect(G, 3)
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                void strong_connect(Graph *G, int 3){
                                    num[3] = min_num[3] = 3; k++ = 4
                                    push(&S, 3);
                                    on_stack[3] = 1;

                                    List list = neighbors(G, 3) = {2, 4}
                                    int j;
                                    for(j = 1; j <= list.size; j++){
                                        j = 1:
                                            int y = element_at(&list, j) = 2
                                            if(num[2] < 0) // sai
                                            else if(on_stack[2]){
                                                min_num[3] = min(min_num[3], num[2]) = 2
                                            }
                                        j = 2:
                                            int y = element_at(&list, j) = 4
                                            if(num[4] < 0){ // dung
                                                strong_connect(G, 4)

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                void strong_connect(Graph *G, int 4){
                                                    num[4] = min_num[4] = 4; k++ = 5
                                                    push(&S, 4);
                                                    on_stack[4] = 1;

                                                    List list = neighbors(G, 4) = {8}
                                                    int j;
                                                    for(j = 1; j <= list.size; j++){
                                                        j = 1:
                                                            int y = element_at(&list, j) = 8
                                                            if(num[8] < 0){ // dung
                                                                strong_connect(G, 8)

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                void strong_connect(Graph *G, int 8){
                                                                    num[8] = min_num[8] = 5; k++ = 6
                                                                    push(&S, 8);
                                                                    on_stack[8] = 1;

                                                                    List list = neighbors(G, 8) = {4, 7}
                                                                    int j;
                                                                    for(j = 1; j <= list.size; j++){
                                                                        j = 1:
                                                                            int y = element_at(&list, j) = 4
                                                                            if(num[4] < 0) // sai
                                                                            else if(on_stack[4]){
                                                                                min_num[8] = min(min_num[8], num[4]) = 4
                                                                            }
                                                                        j = 2:
                                                                            int y = element_at(&list, j) = 7
                                                                            if(num[7] < 0){
                                                                                strong_connect(G, 7)
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                                void strong_connect(Graph *G, int 7){
                                                                                    num[7] = min_num[7] = 6; k++ = 7
                                                                                    push(&S, 7);
                                                                                    on_stack[7] = 1;

                                                                                    List list = neighbors(G, 7) = {3, 8}
                                                                                    int j;
                                                                                    for(j = 1; j <= list.size; j++){
                                                                                        j = 1:
                                                                                            int y = element_at(&list, j) = 3
                                                                                            if(num[3] < 0) // sai
                                                                                            else if(on_stack[3]){
                                                                                                min_num[7] = min(min_num[7], num[3]) = 3
                                                                                            }
                                                                                        j = 2:
                                                                                            int y = element_at(&list, j) = 8
                                                                                            if(num[8] < 0)  // sai
                                                                                            else if(on_stack[8]){
                                                                                                min_num[7] = min(min_num[7], num[8]) = 3
                                                                                            }
                                                                                    }
                                                                                    min_num[7] = 3
                                                                                    if(num[7] == min_num[7])    // sai
                                                                                }

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                                min_num[8] = min(min_num[8], min_num[7]) = 3
                                                                            }
                                                                    }
                                                                    min_num[8] = 3
                                                                    if(num[8] == min_num[8]) // sai
                                                                }


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                min_num[4] = min(min_num[4], min_num[8]) = 3
                                                            }    
                                                    }
                                                    min_num[4] = 3
                                                    if(num[4] == min_num[4]) // sai
                                                }

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                min_num[3] = min(min_num[3], min_num[4]) = 2
                                            }
                                    }
                                    min_num[3] = 2
                                    if(num[3] == min_num[3]) // sai
                                }

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                min_num[2] = min(min_num[2], min_num[3]) = 2
                            }
                    }
                    min_num[2] = 2
                    if(num[2] == min_num[2]){   // dung
                        2 la dinh khop
                        do{
                            Lap lan 1:
                                w = 7
                                Xoa 7 ra khoi ngan xep
                            Lap lan 2:
                                w = 8
                                Xoa 8 ra khoi ngan xep
                            Lap lan 3:
                                w = 4
                                Xoa 4 ra khoi ngan xep
                            Lap lan 4:
                                w = 3
                                Xoa 3 ra khoi ngan xep
                            Lap lan 5:
                                w = 2 = x
                                Xoa 2 ra khoi ngan xep
                        }while(w != x)
                    }
                }

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                min_num[1] = min(min_num[1], min_num[2]) = 1
            }
        j = 2:
            int y = element_at(&list, j) = 6
            if(num[6] < 0){ // dung
                strong_connect(G, 6)

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                void strong_connect(Graph *G, int 6){
                    num[6] = min_num[6] = 7; k++ = 8
                    push(&S, 6);
                    on_stack[6] = 1;

                    List list = neighbors(G, 6) = {2, 5, 7}
                    int j;
                    for(j = 1; j <= list.size; j++){
                        j = 1:
                            int y = element_at(&list, j) = 2
                            if(num[2] < 0) // sai
                            else if(on_stack[2]) // sai
                        j = 2:
                            int y = element_at(&list, j) = 5
                            if(num[5] < 0){ // dung
                                strong_connect(G, 5)
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                void strong_connect(Graph *G, int 5){
                                    num[5] = min_num[5] = 8; k++ = 9
                                    push(&S, 5);
                                    on_stack[5] = 1;

                                    List list = neighbors(G, 5) = {1}
                                    int j;
                                    for(j = 1; j <= list.size; j++){
                                        j = 1:
                                            int y = element_at(&list, j) = 1
                                            if(num[1] < 0) // sai
                                            else if(on_stack[2]){   // dung
                                                min_num[5] = min(min_num[5], num[1]) = 1
                                            }
                                    }
                                    if(num[5] == min_num[5]) // sai
                                }
                                    
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                min_num[6] = min(min_num[6], min_num[5]) = 1
                            }
                        j = 3:
                            int y = element_at(&list, j) = 7
                            if(num[7] < 0)  // sai
                            else if(on_stack[7])    // sai
                    }
                    if(num[6] == min_num[6]) // sai
                }

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                min_num[1] = min(min_num[1], min_num[6]) = 1
            }
    }
    if(num[1] == min_num[1]){   // dung
        1 la dinh khop
        do{
            Lap lan 1:
                w = 5
                Xoa 5 ra khoi ngan xep
            Lap lan 2:
                w = 6
                Xoa 6 ra khoi ngan xep
            Lap lan 3:
                w = 1 = x
                Xoa 1 ra khoi ngan xep
        }while(w != 1)
    }
}

// Ket thuc chuong trinh

Num[1] = 1	min_num[1]  = 1					Dinh khop: 2, 1
Num[2] = 2	min_num[2]  = 2
Num[3] = 3	min_num[3]  = 2
Num[4] = 4	min_num[4]  = 3
Num[5] = 8	min_num[5]  = 1
Num[6] = 7	min_num[6]  = 1
Num[7] = 6	min_num[7]  = 3
Num[8] = 5	min_num[8]  = 3
